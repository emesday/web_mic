{"version":3,"sources":["App.js","serviceWorker.js","index.js","start-recording.mp3","stop-recording.mp3"],"names":["startSound","Howl","src","startSoundSrc","stopSound","stopSoundSrc","workerOptions","encoderWorkerFactory","Worker","process","OggOpusEncoderWasmPath","WebMOpusEncoderWasmPath","Boolean","window","location","hostname","match","ReactDOM","render","useState","recordings","setRecordings","className","onClick","navigator","mediaDevices","getUserMedia","audio","then","stream","recorder","MediaRecorder","mimeType","addEventListener","e","concat","url","URL","createObjectURL","data","getTracks","forEach","track","stop","start","once","setTimeout","play","map","recording","key","controls","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"sQAQMA,EAAa,IAAIC,OAAK,CAACC,IAAKC,MAC5BC,EAAY,IAAIH,OAAK,CAACC,IAAKG,MAE3BC,EAAgB,CACpBC,qBAAsB,WACpB,OAAO,IAAIC,OAAOC,sDAEpBC,uBAAwBD,mDACxBE,wBAAyBF,qDCJPG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFaD,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACZC,EADY,KACAC,EADA,KAwBnB,OACE,yBAAKC,UAAU,OACb,4BAAQC,QAvBA,WACVC,UAAUC,aAAaC,aAAa,CAACC,OAAO,IAAOC,MAAK,SAAAC,GACtD,IACMC,EAAW,IAAIC,IAAcF,EADnB,CAAEG,SAAU,aACwB1B,GACpDwB,EAASG,iBAAiB,iBAAiB,SAAAC,GACzCb,EAAcD,EAAWe,OAAO,CAAC,CAACC,IAAKC,IAAIC,gBAAgBJ,EAAEK,UAC7DV,EAAOW,YAAYC,SAAQ,SAASC,GAClCA,EAAMC,aAGVb,EAASc,QACT5C,EAAW6C,KAAK,OAAO,WACrBC,YAAW,WACThB,EAASa,OACTvC,EAAU2C,SACT,QAEL/C,EAAW+C,YAMX,uBACC3B,EAAW4B,KAAI,SAAAC,GACd,OAAO,yBAAKC,IAAKD,EAAUb,KAAK,2BAAOe,UAAQ,EAACjD,IAAK+C,EAAUb,aEzCvD,MAASgB,SAASC,eAAe,SD6H3C,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,6C,kBCA3CD,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.b21e6ce0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Howl } from 'howler';\nimport startSoundSrc from \"./start-recording.mp3\";\nimport stopSoundSrc from \"./stop-recording.mp3\";\n\nimport MediaRecorder from 'opus-media-recorder';\n\nconst startSound = new Howl({src: startSoundSrc});\nconst stopSound = new Howl({src: stopSoundSrc});\n\nconst workerOptions = {\n  encoderWorkerFactory: function () {\n    return new Worker(process.env.PUBLIC_URL + '/opus-media-recorder/encoderWorker.umd.js')\n  },\n  OggOpusEncoderWasmPath: process.env.PUBLIC_URL + '/opus-media-recorder/OggOpusEncoder.wasm',\n  WebMOpusEncoderWasmPath: process.env.PUBLIC_URL + '/opus-media-recorder/WebMOpusEncoder.wasm',\n};\n\nexport default () => {\n  const [recordings, setRecordings] = useState([]);\n\n  const rec = () => {\n    navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\n      const options = { mimeType: 'audio/ogg' };\n      const recorder = new MediaRecorder(stream, options, workerOptions);\n      recorder.addEventListener('dataavailable', e => {\n        setRecordings(recordings.concat([{url: URL.createObjectURL(e.data)}]));\n        stream.getTracks().forEach(function(track) {\n          track.stop();\n        });\n      });\n      recorder.start();\n      startSound.once(\"end\", () => {\n        setTimeout(() => {\n          recorder.stop();\n          stopSound.play();\n        }, 1000);\n      });\n      startSound.play();\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={rec}>Recording 1 seconds</button>\n      {recordings.map(recording => {\n        return <div key={recording.url}><audio controls src={recording.url} /></div>\n      })}\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/start-recording.18e33794.mp3\";","module.exports = __webpack_public_path__ + \"static/media/stop-recording.9273b816.mp3\";"],"sourceRoot":""}